struct myStructA{
	declr int itemA; : DECLARATION STATEMENT
	declr string itemB; : DECLARATION STATEMENT
}; : STRUCT DEFINITION

struct myStructB{
	declr int itemC; : DECLARATION STATEMENT
	declr myStructA itemD; : DECLARATION STATEMENT
}; : STRUCT DEFINITION

class myClass{
	declr int cItemA; : DECLARATION STATEMENT
	declr myStructB cItemB; : DECLARATION STATEMENT
	func int myFunc(int abc, int k, string str, char c) : FUNCTION HEAD{
		declr myStructB myObj; : DECLARATION STATEMENT
		!! expr myObj = cItemB; !!
		expr cItemB->itemD->itemA = 10; : EXPRESSION STATEMENT
		!! expr cItemB->itemD->itemA = 10; !!
		declr int a; : DECLARATION STATEMENT
		expr abc = 10; : EXPRESSION STATEMENT
		expr str = "c"; : EXPRESSION STATEMENT
		expr c = 'c'; : EXPRESSION STATEMENT
		!! return abc; !!
		label3 :
		{
			expr c = 'l'; : EXPRESSION STATEMENT
		} : LABEL
		declr int a, b; : DECLARATION STATEMENT
		expr a = 10; : EXPRESSION STATEMENT
		switch(add(a, b)) : CONDITIONAL STATEMENT{
			case 1:{
			
			}
			
			case 2:{
			
			}
			
			case 3:{
			
			}
			
			default:{
			
			}
		}
		
		switch(add(a, b)) : CONDITIONAL STATEMENT{
			case 1:{
			
			}
			
			case 2:{
			
			}
			
			case 3:{
			
			}
			
			default:{
			
			}
		}
	}
}; : CLASS DEFINITION

func int main(int a, float b, char c, string str, myClass obj) : FUNCTION HEAD{
	
	expr a = 10; : EXPRESSION STATEMENT
	expr str = "Hello, world"; : EXPRESSION STATEMENT
	label1 :
	{
		declr int a; : DECLARATION STATEMENT
	} : LABEL
	expr a = add(a, call obj->myFunc(5)); : EXPRESSION STATEMENT
	loop while(true){
		if( ((a and b) or add(a, call obj->myFunc(5))) ) : CONDITIONAL STATEMENT{
			
			call obj->myFunc(5); : CALL STATEMENT
			
		}
		call obj->myFunc(5); : CALL STATEMENT
	} : LOOP
	
}

!!
func int setItems(int a, float b, float c, myStruct d, vect<myStruct> ai, vect<int> bi) {
		expr itemA = a;
		expr itemB = b;
		expr itemC = c;
		expr itemD = d;
		return null;
}
	
func int main()
{
	declr int a;
	expr a = 10;
	expr abc->def->ghi->k = 0;
	expr a = call obj->abc->def->a();
	return 10;
}


func vect<myStruct> matr_add (matrix A, matrix B){
    return add_matx(A, B);
}

func vect<M> boo(int num, float nums) {
	return mul(num, (num gt 10));
}
	
func vect<int> foo(int p, int q) {
	expr a = add(sItem1, mul(p, (q and call boo(q))));
	declr vect<int> a;
	sItem2.append(10);
	expr itemD->sItem1 = sub(a, sItem2.append(call boo((a lt itemD->sItem3.strlen()))).sort().length());
	return itemD;
}

!!
