func vect<int> foo() : FUNCTION HEAD{
	declr vect<int>v; : DECLARATION STATEMENT
	declr vect<string>v1; : DECLARATION STATEMENT
	return v1; : RETURN STATEMENT : RETURN STATEMENT }
struct myStructA{
	declr int itemA; : DECLARATION STATEMENT
	declr string itemB; : DECLARATION STATEMENT
}; : STRUCT DEFINITION

struct myStructB{
	declr int itemC; : DECLARATION STATEMENT
	declr myStructA itemD; : DECLARATION STATEMENT
}; : STRUCT DEFINITION


class someClass{
	
	
	declr matrix M[2][3]; : DECLARATION STATEMENT
	func int foo(myStructA Hey, string hey) : FUNCTION HEAD{
		
		declr graph G[10]; : DECLARATION STATEMENT
		expr G =
		{
			2:4,5;
			3:1;
			3:2,4;
		}; : EXPRESSION STATEMENT
		expr M =
		[
			[1,3,4];[1,4,5];
		]; : EXPRESSION STATEMENT
		expr Hey->itemB = hey; : EXPRESSION STATEMENT
		declr int k; : DECLARATION STATEMENT
	}
	func int boo() : FUNCTION HEAD{
		declr int k; : DECLARATION STATEMENT
	}
}; : CLASS DEFINITION


class myClass{
	declr int cItemA; : DECLARATION STATEMENT
	declr myStructB cItemB; : DECLARATION STATEMENT
	declr someClass cItemC; : DECLARATION STATEMENT
	
	func int foo(myStructA Hey, string hey) : FUNCTION HEAD{
		expr Hey->itemB = hey; : EXPRESSION STATEMENT
		declr int k; : DECLARATION STATEMENT
	}
	
	func int boo(myStructB yo) : FUNCTION HEAD{
		expr cItemB = yo; : EXPRESSION STATEMENT
		return yo->itemC; : RETURN STATEMENT : RETURN STATEMENT
	}
	
	func int myFunc(int abc, int k, string str, char c) : FUNCTION HEAD{
		declr int a, a;