func vect<int> foo(){
	declr vect<int>v;
	declr vect<string>v1;
	return v1; }
struct myStructA{
	declr int itemA;
	declr string itemB;
};

struct myStructB{
	declr int itemC;
	declr myStructA itemD;
};


class someClass{
	
	
	declr matrix M[2][3];
	func int foo(myStructA Hey, string hey){
		
		declr graph G[10];
		expr G =
		{
			2:4,5;
			3:1;
			3:2,4;
		};
		expr M =
		[
			[1,3,4];[1,4,5];
		];
		expr Hey->itemB = hey;
		declr int k;
	}
	func int boo(){
		declr int k;
	}
};


class myClass{
	declr int cItemA;
	declr myStructB cItemB;
	declr someClass cItemC;
	
	func int foo(myStructA Hey, string hey){
		expr Hey->itemB = hey;
		declr int k;
	}
	
	func int boo(myStructB yo){
		expr cItemB = yo;
		return yo->itemC;
	}
	
	func int myFunc(int abc, int k, string str, char c){
		declr int a, a;
		declr myStructB myObj;
		!! expr myObj = cItemB; !!
		expr cItemB->itemD->itemA = 10;
		!! expr cItemB->itemD->itemA = 10; !!
		declr int a;
		expr abc = 10;
		expr str = "c";
		expr c = 'c';
		
		label3 :
		{
			expr c = 'l';
		}
		declr int a, b;
		expr a = 10;
		switch(add(a, b)){
			case 1:{
			
			}
			
			case 2:{
				switch(add(a, b)){
					case 1:{
				
					}
				
					case 2:{
					
					}
				
					case 3:{
					
					}
					
					default:{
				
					}
				}
			}
			
			case 3:{
			
			}
			
			default:{
			
			}
		}
		
	}
};

func int main(int a, myClass obj, float b, char c, string str){
	
	declr int arr[3];
	expr arr = [1,2,3];
	
}


