struct myStructA{
	declr int itemA;
	declr vect<int> itemB;
};


struct myStructB {
	declr int itemC;
	declr myStructA itemD;
};

class myClassA {
	declr int itemE;
	declr myStructB itemF;
	
	func void Initialise(){
		expr itemE = 16;
		
		expr itemF->itemC = 24;
		expr itemF->itemD->itemA = 32;
		expr itemF->itemD->itemB = {40, 48, 56, 64};
		return null;
	}
	
	func int factorial(int k)
	{
		if((k eq 0)) {
			return 1;
		}
		declr int ans, num, i;
		expr num = k;
		expr ans = 1;
		loop for(expr i = 1; (i lte k); incr(i)){
			expr ans = mul(ans, i);
		}
		
		return ans;
	}
};

class myClassB {
	declr int itemG;
	declr myClassA itemH;
	
	func void Initialise(){
		expr itemG = 8;
		call itemH->Initialise();
		return null;
	}
	
	func int nCr(int n, int r){
	
		if((r gt n)){
			return -1;
		}
		
		if((r eq 0)){
			return 1;
		}
		
		if((r eq n)){
			return 1;
		}
		
		declr int a, b;
		expr a = call itemH->factorial(n);
		expr b = mul(call itemH->factorial(sub(n, r)), call itemH->factorial(r));
		return div(a, b);
		
		!! return div(call itemH->factorial(n),  mul(call itemH->factorial(sub(n, r)), call itemH->factorial(r)))!!
	}
	
	func vect<int> getCoeffs(int n) {
		declr vect<int> ans;
		declr int i;
		expr i = 0;
		declr int temp;
		loop while((i lte n)) {
			ans.append(call nCr(n, i));
			expr temp = call nCr(n, i);
			print(n, "C", i, ": ", temp);
			incr(i);
		}
		return ans;
	}
	
};

func void printVec(vect<int> myVec){
	declr int i;
	declr int temp;
	loop for(expr i=0; (i lt myVec.length()); incr(i)){
		expr temp = myVec.at(i);
		print(temp);
	}
	return null;
}

func int main() {
	declr myClassB obj;
	
	declr int a;
	expr a = 1;
	
	labelA:{
		switch(a) {
			!! calling inside function inside the class !!
			case 1:{
				declr vect<int> myVec;
				declr int t;
				expr t = 6;
				expr myVec = call obj->getCoeffs(t);
				print("coefficients of x in (1+x)^", t);
				call printVec(myVec);
				break;
			}
			
			!! calling function inside class atrribute of some class !!
			case 2: {
				declr int num;
				declr int t;
				expr t = 5;
				expr num = call obj->itemH->factorial(t);
				print("Factorial of ", t , " = ",num);
				break;
			}
			
			!! using sub-sub-.. attributes !!
			case 3:{
				call obj->Initialise();
				print("Values of sub sub sub sub attributes:");
				print(obj->itemH->itemF->itemD->itemA);
				
				!! call printVec(obj->itemH->itemF->itemD->itemB) !!
				declr int i, temp;
				expr i = 0;
				loop for(expr i=0; (i lt obj->itemH->itemF->itemD->itemB.length()); incr(i)){
					expr temp = obj->itemH->itemF->itemD->itemB.at(i);
					print(temp);
				}
				break;
			}
			
			default:{
				!! empty scope !!
			}
		}
	}
	
	incr(a);
	
	if((a gt 3)){
		goto labelB;
	}
	
	else{
		goto labelA;
	}
	
	labelB:{
		print("Exiting");
	}
	
	return 0;
}
