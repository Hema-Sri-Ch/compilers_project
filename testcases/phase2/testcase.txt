class myClass {
	declr int itemA;
	declr float itemB, itemC;
	declr struct myStruct itemD;
	
	func void setItems(int a, float b, float c, myStruct d) {
		expr itemA = a;
		expr itemB = b;
		expr itemC = c;
		expr itemD = d;
		return null;
	}
	
	func int boo(int num) {
		return mul(num, (num gt 10));
	}
	
	func myStruct foo(int p, int q) {
		expr a = add(sItem1, mul(p, (q and call boo(q))));
		sItem2.append(10);
		expr itemD->sItem1 = sub(a, sItem2.append(call boo((a lt itemD->sItem3.strlen()))).sort().length());
		return itemD;
	}
};

struct myStruct {
	declr int sItem1;
	declr vect<int> sItem2;
	declr string sItem3;
};

func string zoo(){
	return "Hello, world\n";
}

func int main () {
	{}
	{
		declr graph G1[4];
		expr G1 = {
				1 : 2,3;
				2 : 1,4;
				3 : 1;
				4 : 2;
			};

		declr graph G2[3];
		expr G2 = {
					1 : (2,8),(3,12);
					2 : (3,5);
				};
				
		declr vect<int> nodes1, nodes2;
		expr nodes1 = G1.bfs(1);
		expr nodes2 = G2.dfs(1);		
		declr vect<myStruct> structList;
		declr struct myStruct obj1;
		expr obj1->sItem1 = 10;
		expr obj1->sItem2 = {};
		expr obj1->sItem3 = "";
		structList.append(obj1);
	}
	
	
	declr class myClass obj2;
	declr int a;
	expr a = strcmp(strjoin(strjoin(obj1->sItem3, "abc"), call zoo()), str1.strcut(obj2->itemA, call obj2->boo(10)));
	obj->sItem2.sort();
	label1: {
	if(((a lt 10) and call obj2->boo(add(a, -85)))) {
		declr matrix mat[2][2];
		expr mat = [[1,2];
	 			[2.0,3.5];
				];
				
		declr matrix mat2[2][2], mat3[2][2];
		expr mat = [[1, 0]; [0, 1];];
		
		
		expr mat3 = mult_matx(sub_matx(mat2, mat1), add_matx(mat2, mat1)).transpose();
		if(call obj2->boo(a)) {
			expr a = mat3.trace();
			declr vect<int> inner_vect;
			expr inner_vect = obj2->itemD->sItem2.sort();
			inner_vect.append({1, 2});
		}
		
		else {
			!! write some statements here !!
			goto label1;
		}
		
		myVec.append(mat3).sort();
		
	}}
	
	else {
		loop while(true) {
			switch(call obj2->boo(a))
			{
				case 1:
				{
					expr a = incr(a) ;
					decr(call obj2->boo(a));
				}	
				case 2:
				{
					expr a = decr(myStruct->item3.strlen()) ;
					break;
				}	
				default :
				{
					expr a = 100;
				}	
			}
		}
	}
	
	return 0;
}
