
!! These are comments !!

struct node 
{
    declr string name;
    declr char grade;
};

class vehicle
{
    declr string type;
    declr int regNo;
    declr bool pollutionCheck;
    func int getRegNo()
    {
        return regNo;
    }
};

func int f1()
{
    declr int arr[10];
    expr arr = [1,2,3,4,5,6,7,8,9];

    declr graph G[4];
    expr G =
    {
        1 : 2,3;
        2 : 1,4;
        3 : 1;
        4 : 2;
    };

    expr G =
    {
        1 : (2,8),(3,12);
        2 : (3,5);
    };

    declr matrix mat[2][3];
    expr mat =
    [
        [1,2,3];
        [4,5,6];
    ];

    declr vect<int> myvec;
    expr myvec = {1,2,3};

    if (( (a and b) or add(1, 2)))
    {
        call foo();
        call fun(a, incr(n));
    }
    else
    {
        incr(incr(a));
        return b;
    }

    switch(id1)
    {
        case 1:
        {   
            return incr(a);
        }
        default:
        {
            expr a = myvec.length();
            myvec.sort();
            myvec.clear();
            expr a = myvec.at(3);
        }
    }

    label1 : 
    {
        incr(a);
    }

    loop for (expr i=0 ; (i lt 10); incr(i))
    {
        goto label1;
    }

    loop while((i lte 10))
    {
        myvec.append(4);
        myvec.remove(1);
    }

    declr matrix A[2][3], B[2][3], C[2][3];
    expr C = add_matx(A,B);
    expr C = sub_matx(A,B);
    expr C = mult_matx(A,B);
    expr B = A.transpose();
    expr a = A.trace();

    declr matrix A[4][4];
    expr A =
    [
        [0,1,1,0];
        [1,0,0,1];
        [1,0,0,0];
        [0,1,0,0];
    ];
    expr a = A.matxtograph();

    expr myvec = G.dfs(3);
    expr myvec = G.bfs(2);

    expr M = G.graphtomatx();

    expr x = G.shpathval(1,3);
    expr myvec = G.shpath(1,3);

    expr length = str.strlen();
    expr a = strcmp (str1, call foo());
    expr str4 = strjoin(strjoin(str1, str2), str2);
    expr str2 = str1.strcut(2, 6);

    return 0;
}
