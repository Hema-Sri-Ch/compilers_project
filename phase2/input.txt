func int main()
{
	{}
	expr sdf = -78.5;
	expr sdf = -85;	
	{
		expr x = sdf;
		{expr sdf = sdf;}
	}

	declr matrix mat[2][3];
	expr mat = [[1,2,3];
	 			[2.0,3.5,4.8];
				];
				
	expr myvec = {mat, 
				[[1,2,3];
	 			 [2.0,3.5,4.8];],
	 			{a, b, c}, 
	 			{},
	 			{
					1 : 2,3;
					2 : 1,4;
					3 : 1;
					4 : 2;
				}
				};
				
				
	expr t = clear.append(4).sort();
	expr s = clear.append(add(call foo(), (a and b)));
	expr s = clear.append(mat.trace()).remove(1);
	return myvec.append(clear.length()).remove(8);
	expr s = myvec.append(8).append(9);
	
	
	return myvec.remove(clear.length());
	return myvec.remove(add(call foo(), (a and mat.trace())));
	
	
	return clear.remove(str.strcut(call a.foo(), (a or b)));
	
	
	clear.append(4).sort();
	clear.append(add(call foo(), (a and b)));
	clear.append(mat.trace()).remove(1);
	myvec.append(clear.length()).remove(8);
	myvec.append(8).append(9);
	
	
	myvec.remove(clear.length());
	myvec.remove(add(call foo(), (a and mat.trace())));
	
	
	clear.remove(str.strcut(call a.foo(), (a or b)));
	
	
	expr a = myvec.length();
	myvec.sort();
	myvec.clear();
	expr a = myvec.at(3);
	expr C = add_matx(sub_matx(P, mult_matx(Q, R)), S);
	expr B = add_matx(A, B).transpose().trace();
	expr B = A.trace();
	expr myvec = G.dfs(3);
	
	expr str3 = strjoin(str1, str2);
	expr str4 = strjoin(strjoin(str1, str2), str2).strlen();
	expr t8 = strcmp(strjoin(strjoin(call foo(), call boo()), call zoo()), str1.strcut(a, call foo()));
	expr str4 = strjoin(strjoin(call foo(), call boo()), call zoo());
}


func int main()
{
	
	loop for (expr i=0 ; (i lt 10); expr j = incr(i))
	{	
  		expr m = 0;
  		return {};
	}
	loop for (expr i=0 ; (i lt 10); expr i = mul(i,3))
	{	
  		expr m = 0;
  		return {1, 2, 3};
	}
	return {1 : 2,3;2 : 1,4;3 : 1;4 : 2;};
}

struct node
{
	declr string name;
	declr char grade;
	declr int marks;
	declr float cgpa;
	declr bool feeStatus;
};


class vehical {
    declr string type;
    declr int regNo;
    declr bool pollutionCheck;
    func int getRegNo()
    {
        declr int regNo;
    }
    func void updatePollStatus ( bool val )
    {
        expr pollutionCheck = val;
        declr int nuldl;
    }
};

func bool foo(int a, char b, vect<int> sdf, node sdffd)
{
	declr graph G[4];
	expr G =
	{
		1 : 2,3;
		2 : 1,4;
		3 : 1;
		4 : 2;
	};

	declr graph G[3];
	expr G =
	{
		1 : (2,8),(3,12);
		2 : (3,5);
	};

	declr vect<int> myvec;
	expr myvec = {1,2,3};
	expr myvec = {1,bat,3};
	expr myvec = {1,{1, str, {}},3};

	if(A.strlen())
	{
		call sdf();
		call sdfsd.sdf();
		declr int a;
		declr float f1, f2;
	}
	else
	{
		declr vect < int > myVec; 
		declr graph G[10];
	}

	declr vect<vect<int>> myvec;

	switch(5)
	{
		case 1:
		{
			declr int arr[10];
			declr int arr[10], barr[5];
		}	
		case 2:
		{
			expr adf = add(df, mul(a, div(sub(c, d), f)));
			declr string str1, str2;
		}	
		default :
		{
			declr vect<int> myVec1, myVec2;	
		}	
	}
}
