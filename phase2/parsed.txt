func bool foo(int a, char b, vect<int> sdf, node sdffd) : FUNCTION HEAD
{
	declr graph G[4]; : DECLARATION STATEMENT
	expr G =
	{
		1 : 2,3;
		2 : 1,4;
		3 : 1;
		4 : 2;
	}; : EXPRESSION STATEMENT

	declr graph G[3]; : DECLARATION STATEMENT
	expr G =
	{
		1 : (2,8),(3,12);
		2 : (3,5);
	}; : EXPRESSION STATEMENT

	declr vect<int> myvec; : DECLARATION STATEMENT
	expr myvec = {1,2,3}; : EXPRESSION STATEMENT
	expr myvec = {1,bat,3}; : EXPRESSION STATEMENT
	expr myvec = {1,{1, str, {}},3}; : EXPRESSION STATEMENT

	if((a or b)) : CONDITIONAL STATEMENT
	{
		call sdf(); : CALL STATEMENT
		call sdfsd.sdf(); : CALL STATEMENT
		declr int a; : DECLARATION STATEMENT
		declr float f1, f2; : DECLARATION STATEMENT
	}
	else
	{
		declr vect < int > myVec; : DECLARATION STATEMENT 
		declr graph G[10]; : DECLARATION STATEMENT
	}

	declr vect<vect<int>> myvec; : DECLARATION STATEMENT

	switch(5) : CONDITIONAL STATEMENT
	{
		case 1:
		{
			declr int arr[10]; : DECLARATION STATEMENT
			declr int arr[10], barr[5]; : DECLARATION STATEMENT
		}	
		case 2:
		{
			expr adf = add(df, mul(a, div(sub(c, d), f))); : EXPRESSION STATEMENT
			declr string str1, str2; : DECLARATION STATEMENT
		}	
		default :
		{
			declr vect<int> myVec1, myVec2; : DECLARATION STATEMENT	
		}	
	}
}
