struct myStructA{
	declr int itemA;
	declr vect<int> itemB;
};


struct myStructB {
	declr int itemC;
	declr myStructA itemD;
};

class myClassA {
	declr int itemE;
	declr myStructB itemF;
	
	func int factorial(int k)
	{
		declr int ans, num;
		expr num = itemE;
		expr ans = k;
		loop while (decr(num))
		{
			expr ans = mul(ans, num);
		}
		return k;
	}
};

class myClassB {
	declr int itemG;
	declr myClassA itemH;
	
	func int nCr(int n, int r){
	
		if((r gt n)){
			return -1;
		}
		
		declr int a, b;
		expr a = call itemH->factorial(n);
		expr b = mul(call itemH->factorial(sub(n, r)), call itemH->factorial(r));
		return div(a, b);
		
		!! return div(call itemH->factorial(n),  mul(call itemH->factorial(sub(n, r)), call itemH->factorial(r)))!!
	}
	
	func vect<int> getCoeffs(int n) {
		declr vect<int> ans;
		return {1};
	}
	
	func void printPyramid () {
		return null;
	}
};


func int main() {
	return 0;
}
